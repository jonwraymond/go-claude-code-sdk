# This workflow runs continuous integration checks on the Go codebase.
# It is triggered on pushes to the main and develop branches, as well as pull requests targeting main.
name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/**'

jobs:
  # The lint job checks the code for style issues and potential errors.
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      # Run the golangci-lint linter.
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

  # The test job runs the unit tests with a matrix of Go versions.
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      # Run the tests with race detection and code coverage.
      - name: Test
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      # Upload the coverage report to Codecov.
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          verbose: true

  # The security job scans the code for security vulnerabilities.
  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      # Run the Gosec security scanner.
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'
      # Upload the SARIF file to the GitHub Security tab.
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # The integration test job runs integration tests that require external dependencies.
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    env:
      INTEGRATION_TESTS: true
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      # Install Claude Code CLI for integration tests
      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          which claude || echo "Claude CLI not found in PATH"
      # Run integration tests only if API key is available
      - name: Run Integration Tests
        if: env.ANTHROPIC_API_KEY != ''
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          SKIP_MCP_TESTS: true
        run: go test -v -race -tags=integration -timeout 15m -coverprofile=integration-coverage.out -covermode=atomic ./tests/integration/...
      # Skip integration tests if no API key
      - name: Skip Integration Tests
        if: env.ANTHROPIC_API_KEY == ''
        run: echo "Skipping integration tests - ANTHROPIC_API_KEY not set"
      # Upload integration test coverage to Codecov (only if tests ran)
      - name: Upload integration coverage to Codecov
        if: env.ANTHROPIC_API_KEY != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./integration-coverage.out
          verbose: true

  # The build job builds the Go packages to ensure they compile.
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - run: go build -v ./...

  # Performance testing for SDK operations
  performance:
    name: Performance Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      # Run performance benchmarks (skip if directory doesn't exist)
      - name: Run Performance Tests
        shell: bash
        run: |
          if [ -d "./tests/performance" ]; then
            go test -bench=. -benchmem ./tests/performance/... || echo "Performance tests failed or no benchmarks found"
          else
            echo "No performance tests directory found - skipping"
          fi
      # Run memory profiling (skip if directory doesn't exist)
      - name: Run Memory Profiling
        shell: bash
        run: |
          if [ -d "./tests/performance" ]; then
            go test -memprofile=mem.prof -cpuprofile=cpu.prof ./tests/performance/... || echo "Profiling tests failed or no profiling tests found"
          else
            echo "No performance tests directory found - skipping profiling"
          fi
